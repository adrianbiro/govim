# Test that completing of unimported std library packages works.

sleep $GOVIM_ERRLOGMATCH_WAIT

vim ex 'e main.go'

# Unimported completion
vim ex 'call cursor(5,1)'
vim normal 'Sx = blah.Na'
vim ex 'execute \"normal A\\<C-X>\\<C-O>\\<C-N>\\<C-N>\"'

# Check import has been added
vim ex 'noau w'
cmp main.go main.go1.golden

# Regular completion
vim ex 'call cursor(8,1)'
vim normal Sfmt.Pr
vim ex 'execute \"normal A\\<C-X>\\<C-O>\\<C-N>(\\\"Hello\\\")\"'

# Keyword complete
vim ex 'call cursor(9,1)'
vim normal Sfmt.Pr
vim ex 'execute \"normal A\\<C-X>\\<C-N>(\\\"Hello\\\")\"'

# Verify final result
vim ex 'noau w'
cmp main.go main.go2.golden

# Assert that we have received no error (Type: 1) or warning (Type: 2) log messages
# Disabled pending resolution to https://github.com/golang/go/issues/34103
# errlogmatch -start -count=0 'LogMessage callback: &protocol\.LogMessageParams\{Type:(1|2), Message:".*'

-- .warm_module_cache --
# For this test we need to pre-warm the module (download) cache
example.com/blah
-- go.mod --
module mod.com

go 1.12
-- main.go --
package main

func main() {
	var x string



}
-- main.go1.golden --
package main

import "fmt"

func main() {
	fmt.Println("Hello")


}
-- main.go2.golden --
package main

import "fmt"

func main() {
	fmt.Println("Hello")
	fmt.Printf("Hello")
	fmt.Println("Hello")
}
